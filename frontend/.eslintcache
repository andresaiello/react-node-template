[{"/Users/andresaiello/git/metamask/frontend/src/index.tsx":"1","/Users/andresaiello/git/metamask/frontend/src/reportWebVitals.ts":"2","/Users/andresaiello/git/metamask/frontend/src/app/containers/App/index.tsx":"3","/Users/andresaiello/git/metamask/frontend/src/app/utils/index.ts":"4","/Users/andresaiello/git/metamask/frontend/src/app/components/index.ts":"5","/Users/andresaiello/git/metamask/frontend/src/app/components/Footer/index.tsx":"6","/Users/andresaiello/git/metamask/frontend/src/app/components/Header/index.tsx":"7","/Users/andresaiello/git/metamask/frontend/src/app/components/MainPanel/index.tsx":"8","/Users/andresaiello/git/metamask/frontend/src/app/components/DataRow/index.tsx":"9","/Users/andresaiello/git/metamask/frontend/src/app/components/Table/index.tsx":"10"},{"size":673,"mtime":1611594051572,"results":"11","hashOfConfig":"12"},{"size":467,"mtime":1611592748765,"results":"13","hashOfConfig":"12"},{"size":914,"mtime":1611676973412,"results":"14","hashOfConfig":"12"},{"size":751,"mtime":1611676694272,"results":"15","hashOfConfig":"12"},{"size":181,"mtime":1611597886610,"results":"16","hashOfConfig":"12"},{"size":80,"mtime":1611597096137,"results":"17","hashOfConfig":"12"},{"size":124,"mtime":1611597618965,"results":"18","hashOfConfig":"12"},{"size":744,"mtime":1611597785325,"results":"19","hashOfConfig":"12"},{"size":329,"mtime":1611676871370,"results":"20","hashOfConfig":"12"},{"size":432,"mtime":1611676764115,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1isgul8",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/andresaiello/git/metamask/frontend/src/index.tsx",[],[],"/Users/andresaiello/git/metamask/frontend/src/reportWebVitals.ts",["47"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","/Users/andresaiello/git/metamask/frontend/src/app/containers/App/index.tsx",["48","49"],"/Users/andresaiello/git/metamask/frontend/src/app/utils/index.ts",["50","51","52","53","54","55"],"/Users/andresaiello/git/metamask/frontend/src/app/components/index.ts",[],"/Users/andresaiello/git/metamask/frontend/src/app/components/Footer/index.tsx",["56"],"import * as React from 'react';\n\nexport const Footer = () => <footer></footer>;\n","/Users/andresaiello/git/metamask/frontend/src/app/components/Header/index.tsx",["57"],"import * as React from 'react';\n\nexport const Header = () => (\n    <header>\n        <h1>Metamask Test</h1>\n    </header>\n);\n","/Users/andresaiello/git/metamask/frontend/src/app/components/MainPanel/index.tsx",["58"],"import * as React from 'react';\nimport { Button } from '@material-ui/core';\n\nexport interface MainPanel_Props {\n    onSubmit: (query: string) => void;\n}\n\nexport const MainPanel = ({ onSubmit }: MainPanel_Props) => {\n    const [query, setQuery] = React.useState('');\n    return (\n        <div>\n            <div>\n                <textarea\n                    id=\"query-input\"\n                    name=\"query-input\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                ></textarea>\n            </div>\n            <div>\n                <Button onClick={() => onSubmit(query)} color=\"primary\">\n                    Run!\n                </Button>\n            </div>\n        </div>\n    );\n};\n","/Users/andresaiello/git/metamask/frontend/src/app/components/DataRow/index.tsx",["59"],"/Users/andresaiello/git/metamask/frontend/src/app/components/Table/index.tsx",["60"],{"ruleId":"61","severity":1,"message":"62","line":3,"column":25,"nodeType":"63","messageId":"64","endLine":3,"endColumn":57},{"ruleId":"61","severity":1,"message":"62","line":14,"column":25,"nodeType":"63","messageId":"64","endLine":14,"endColumn":49},{"ruleId":"61","severity":1,"message":"62","line":21,"column":5,"nodeType":"65","messageId":"64","endLine":21,"endColumn":13},{"ruleId":"66","severity":1,"message":"67","line":3,"column":28,"nodeType":"68","messageId":"69","endLine":3,"endColumn":31,"suggestions":"70"},{"ruleId":"61","severity":1,"message":"62","line":11,"column":27,"nodeType":"63","messageId":"64","endLine":11,"endColumn":51},{"ruleId":"71","severity":1,"message":"72","line":11,"column":34,"nodeType":"73","messageId":"74","endLine":11,"endColumn":47},{"ruleId":"61","severity":1,"message":"62","line":27,"column":29,"nodeType":"63","messageId":"64","endLine":27,"endColumn":47},{"ruleId":"61","severity":1,"message":"75","line":27,"column":30,"nodeType":"73","messageId":"76","endLine":27,"endColumn":43},{"ruleId":"66","severity":1,"message":"67","line":27,"column":40,"nodeType":"68","messageId":"69","endLine":27,"endColumn":43,"suggestions":"77"},{"ruleId":"61","severity":1,"message":"62","line":3,"column":23,"nodeType":"63","messageId":"64","endLine":3,"endColumn":28},{"ruleId":"61","severity":1,"message":"62","line":3,"column":23,"nodeType":"63","messageId":"64","endLine":3,"endColumn":28},{"ruleId":"61","severity":1,"message":"62","line":8,"column":26,"nodeType":"63","messageId":"64","endLine":8,"endColumn":60},{"ruleId":"61","severity":1,"message":"62","line":8,"column":24,"nodeType":"63","messageId":"64","endLine":8,"endColumn":51},{"ruleId":"61","severity":1,"message":"62","line":9,"column":22,"nodeType":"63","messageId":"64","endLine":9,"endColumn":50},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","FunctionExpression","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["78","79"],"@typescript-eslint/no-unused-vars","'query' is defined but never used.","Identifier","unusedVar","Argument 'response' should be typed with a non-any type.","anyTypedArg",["80","81"],{"messageId":"82","fix":"83","desc":"84"},{"messageId":"85","fix":"86","desc":"87"},{"messageId":"82","fix":"88","desc":"84"},{"messageId":"85","fix":"89","desc":"87"},"suggestUnknown",{"range":"90","text":"91"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"90","text":"92"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"93","text":"91"},{"range":"93","text":"92"},[62,65],"unknown","never",[645,648]]